{"version":3,"sources":["../../../src/cli/commands/Run.js"],"names":["RunCommand","constructor","name","description","arguments","options","tasks","continue","strict","run","cli","process","env","ATSCM_CONFIG_PATH","environment","configPath","CONTINUE_ON_FAILURE","runTask","task","start","Date","now","getDuration","colors","magenta","coloredName","cyan","info","running","Promise","Error","e","error","red","require","modulePath","tasksSimple","console","Object","keys","join","tasksJson","JSON","stringify","entries","map","bold","maxNameLength","reduce","l","n","Math","max","length","forEach","padEnd","white","tasksToRun"],"mappings":";;;;;;AAAA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;AAGe,MAAMA,UAAN,2BAAiC;;AAE9C;;;;;AAKAC,cAAYC,IAAZ,EAAkBC,WAAlB,EAA+B;AAC7B,UAAMD,IAAN,EAAYC,WAAZ,EAAyB;AACvBC,iBAAW,WADY;AAEvBC,eAAS;AACPC,eAAO,kBAAWA,KADX;AAEP,wBAAgB,kBAAW,cAAX,CAFT;AAGP,sBAAc,kBAAW,YAAX,CAHP;AAIPC,kBAAU,kBAAWA;AAJd,OAFc;AAQvBC,cAAQ;AARe,KAAzB;AAUD;;AAED;;;;AAIA,QAAMC,GAAN,CAAUC,GAAV,EAAe;AACbC,YAAQC,GAAR,CAAYC,iBAAZ,GAAgCH,IAAII,WAAJ,CAAgBC,UAAhD;AACAJ,YAAQC,GAAR,CAAYI,mBAAZ,GAAkCN,IAAIL,OAAJ,CAAYE,QAA9C;;AAEA,UAAMU,UAAU,OAAOf,IAAP,EAAagB,IAAb,KAAsB;AACpC,YAAMC,QAAQC,KAAKC,GAAL,EAAd;AACA,YAAMC,cAAc,MAAM,iBAAOC,MAAP,CAAcC,OAAd,CAAsB,gCAAiBJ,KAAKC,GAAL,KAAaF,KAA9B,CAAtB,CAA1B;AACA,YAAMM,cAAe,IAAG,iBAAOF,MAAP,CAAcG,IAAd,CAAmBxB,IAAnB,CAAyB,GAAjD;;AAEA,uBAAOyB,IAAP,CAAa,YAAWF,WAAY,KAApC;;AAEA,UAAI;AACF,cAAMG,UAAUV,KAAKR,IAAIL,OAAT,CAAhB;;AAEA,YAAIuB,mBAAmBC,OAAvB,EAAgC;AAC9B,gBAAMD,OAAN;AACD,SAFD,MAEO,IAAIA,iCAAJ,EAA+B;AACpC,gBAAM,+BAAUA,OAAV,CAAN;AACD,SAFM,MAEA;AACL,gBAAM,IAAIE,KAAJ,CAAW,oDACfZ,KAAKjB,WAAL,CAAiBC,IAClB;qFAFK,CAAN;AAID;;AAED,yBAAOyB,IAAP,CAAa,YAAWF,WAAY,UAASH,aAAc,EAA3D;AACD,OAfD,CAeE,OAAOS,CAAP,EAAU;AACV,yBAAOC,KAAP,CAAaD,CAAb;AACA,yBAAOC,KAAP,CAAc,GAAEP,WAAY,IAAG,iBAAOF,MAAP,CAAcU,GAAd,CAAkB,eAAlB,CAAmC,IAAGX,aAAc,EAAnF;AACD;AACF,KA1BD;;AA4BA;AACA,UAAMhB,QAAQ4B,QAAQ,gBAAKxB,IAAII,WAAJ,CAAgBqB,UAArB,EAAiC,gBAAjC,CAAR,CAAd;;AAEA,QAAIzB,IAAIL,OAAJ,CAAY+B,WAAhB,EAA6B;AAC3B;AACAC,cAAQV,IAAR,CAAaW,OAAOC,IAAP,CAAYjC,KAAZ,EAAmBkC,IAAnB,CAAwB,IAAxB,CAAb;AACA;AACD;;AAED,QAAI9B,IAAIL,OAAJ,CAAYoC,SAAhB,EAA2B;AACzB;AACAJ,cAAQV,IAAR,CAAae,KAAKC,SAAL,CACXL,OAAOM,OAAP,CAAetC,KAAf,EAAsBuC,GAAtB,CAA0B,CAAC,CAAC3C,IAAD,EAAOgB,IAAP,CAAD,MAAmB,EAAEhB,IAAF,EAAQC,aAAae,KAAKf,WAA1B,EAAnB,CAA1B,CADW,EAEX,IAFW,EAGX,IAHW,CAAb;AAKA;AACD;;AAED,QAAIO,IAAIL,OAAJ,CAAYC,KAAhB,EAAuB;AACrB,uBAAOqB,IAAP,CAAY,iBAAOJ,MAAP,CAAcuB,IAAd,CAAmB,kBAAnB,CAAZ;AACA,YAAMC,gBAAgBT,OAAOC,IAAP,CAAYjC,KAAZ,EAAmB0C,MAAnB,CAA0B,CAACC,CAAD,EAAIC,CAAJ,KAAUC,KAAKC,GAAL,CAASH,CAAT,EAAYC,EAAEG,MAAd,CAApC,EAA2D,CAA3D,CAAtB;;AAEAf,aAAOM,OAAP,CAAetC,KAAf,EAAsBgD,OAAtB,CAA8B,CAAC,CAACpD,IAAD,EAAOgB,IAAP,CAAD,KAAkB;AAC9C,yBAAOS,IAAP,CAAa,KAAI,iBAAOJ,MAAP,CAAcG,IAAd,CACfxB,KAAKqD,MAAL,CAAYR,aAAZ,CADe,CAEf,KAAI,iBAAOxB,MAAP,CAAciC,KAAd,CAAoBtC,KAAKf,WAAzB,CAAsC,EAF5C;AAGD,OAJD;AAKA;AACD;;AAED,UAAMsD,aAAa/C,IAAIL,OAAJ,CAAYa,IAAZ,IAAoB,CAAC,SAAD,CAAvC;;AAEAuC,eAAWH,OAAX,CAAmBJ,KAAK;AACtB,UAAI,CAAC5C,MAAM4C,CAAN,CAAL,EAAe;AACb,cAAM,yBAAgB,uBAAsBA,CAAE,EAAxC,EACJ,wDADI,CAAN;AAED;AACF,KALD;;AAOA,SAAK,MAAMhC,IAAX,IAAmBuC,UAAnB,EAA+B;AAC7B,YAAMxC,QAAQC,IAAR,EAAcZ,MAAMY,IAAN,CAAd,CAAN;AACD;AACF;;AAnG6C;kBAA3BlB,U","file":"Run.js","sourcesContent":["import { join } from 'path';\nimport { Stream } from 'stream';\nimport toPromise from 'stream-to-promise';\nimport humanizeDuration from 'humanize-duration';\nimport Command from '../../lib/cli/Command';\nimport Logger from '../../lib/util/Logger';\nimport CliOptions from '../Options';\nimport UsageError from '../../lib/error/UsageError';\n\n/**\n * The command invoked when running \"run\".\n */\nexport default class RunCommand extends Command {\n\n  /**\n   * Creates a new {@link RunCommand} with the specified name and description.\n   * @param {string} name The command's name.\n   * @param {string} description The command's description.\n   */\n  constructor(name, description) {\n    super(name, description, {\n      arguments: '[task...]',\n      options: {\n        tasks: CliOptions.tasks,\n        'tasks-simple': CliOptions['tasks-simple'],\n        'tasks-json': CliOptions['tasks-json'],\n        continue: CliOptions.continue,\n      },\n      strict: false,\n    });\n  }\n\n  /**\n   * Runs gulp with the specified tasks.\n   * @param {AtSCMCli} cli The current Cli instance.\n   */\n  async run(cli) {\n    process.env.ATSCM_CONFIG_PATH = cli.environment.configPath;\n    process.env.CONTINUE_ON_FAILURE = cli.options.continue;\n\n    const runTask = async (name, task) => {\n      const start = Date.now();\n      const getDuration = () => Logger.colors.magenta(humanizeDuration(Date.now() - start));\n      const coloredName = `'${Logger.colors.cyan(name)}'`;\n\n      Logger.info(`Starting ${coloredName}...`);\n\n      try {\n        const running = task(cli.options);\n\n        if (running instanceof Promise) {\n          await running;\n        } else if (running instanceof Stream) {\n          await toPromise(running);\n        } else {\n          throw new Error(`A task must return a Promise or a Stream, got a '${\n            task.constructor.name\n          }'\n  Please report this error in the atscm repo (https://github.com/atSCM/atscm/issues)`);\n        }\n\n        Logger.info(`Finished ${coloredName} after ${getDuration()}`);\n      } catch (e) {\n        Logger.error(e);\n        Logger.error(`${coloredName} ${Logger.colors.red('errored after')} ${getDuration()}`);\n      }\n    };\n\n    // eslint-disable-next-line global-require\n    const tasks = require(join(cli.environment.modulePath, '../Gulpfile.js'));\n\n    if (cli.options.tasksSimple) {\n      // eslint-disable-next-line no-console\n      console.info(Object.keys(tasks).join('\\n'));\n      return;\n    }\n\n    if (cli.options.tasksJson) {\n      // eslint-disable-next-line no-console\n      console.info(JSON.stringify(\n        Object.entries(tasks).map(([name, task]) => ({ name, description: task.description })),\n        null,\n        '  '\n      ));\n      return;\n    }\n\n    if (cli.options.tasks) {\n      Logger.info(Logger.colors.bold('Available tasks:'));\n      const maxNameLength = Object.keys(tasks).reduce((l, n) => Math.max(l, n.length), 0);\n\n      Object.entries(tasks).forEach(([name, task]) => {\n        Logger.info(`  ${Logger.colors.cyan(\n          name.padEnd(maxNameLength)\n        )}  ${Logger.colors.white(task.description)}`);\n      });\n      return;\n    }\n\n    const tasksToRun = cli.options.task || ['default'];\n\n    tasksToRun.forEach(n => {\n      if (!tasks[n]) {\n        throw new UsageError(`Task never defined: ${n}`,\n          'To list available tasks, try running atscm run --tasks');\n      }\n    });\n\n    for (const task of tasksToRun) {\n      await runTask(task, tasks[task]);\n    }\n  }\n\n}\n"]}